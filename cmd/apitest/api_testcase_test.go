package main

import (
	"bytes"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"math/rand"
	"net/http"
	"net/http/httptest"
	"testing"
	"time"

	"github.com/programmfabrik/apitest/pkg/lib/datastore"
	"github.com/tidwall/gjson"

	"github.com/programmfabrik/apitest/pkg/lib/filesystem"
	"github.com/programmfabrik/apitest/pkg/lib/report"
	"github.com/spf13/afero"
)

func init() {
	rand.Seed(time.Now().UnixNano())

}
func TestQjson(t *testing.T) {
	jsolo := `{"body":[{"_session":{"token":"ac554a02-3ef0-42da-8ffb-603d73de95f9"},"event":{"_id":46,"global_object_id":"1@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":1,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","session_self":true,"timestamp":"2019-03-13T10:41:05+01:00","type":"OBJECT_INSERT"},"user":{"_generated_displayname":"Root","_id":1}},{"_session":{"token":"ac554a02-3ef0-42da-8ffb-603d73de95f9"},"event":{"_id":47,"global_object_id":"2@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":2,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","session_self":true,"timestamp":"2019-03-13T10:41:05+01:00","type":"OBJECT_INSERT"},"user":{"_generated_displayname":"Root","_id":1}},{"_session":{"token":"ac554a02-3ef0-42da-8ffb-603d73de95f9"},"event":{"_id":48,"global_object_id":"3@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":3,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","session_self":true,"timestamp":"2019-03-13T10:41:06+01:00","type":"OBJECT_INSERT"},"user":{"_generated_displayname":"Root","_id":1}},{"_session":{"token":"ac554a02-3ef0-42da-8ffb-603d73de95f9"},"event":{"_id":49,"global_object_id":"4@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":4,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","session_self":true,"timestamp":"2019-03-13T10:41:06+01:00","type":"OBJECT_INSERT"},"user":{"_generated_displayname":"Root","_id":1}},{"event":{"_id":50,"global_object_id":"1@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":1,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","timestamp":"2019-03-13T10:41:06+01:00","type":"OBJECT_INDEX"}},{"event":{"_id":51,"global_object_id":"2@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":2,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","timestamp":"2019-03-13T10:41:06+01:00","type":"OBJECT_INDEX"}},{"_session":{"token":"ac554a02-3ef0-42da-8ffb-603d73de95f9"},"event":{"_id":52,"global_object_id":"5@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":5,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","session_self":true,"timestamp":"2019-03-13T10:41:06+01:00","type":"OBJECT_INSERT"},"user":{"_generated_displayname":"Root","_id":1}},{"_session":{"token":"ac554a02-3ef0-42da-8ffb-603d73de95f9"},"event":{"_id":53,"global_object_id":"6@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":6,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","session_self":true,"timestamp":"2019-03-13T10:41:06+01:00","type":"OBJECT_INSERT"},"user":{"_generated_displayname":"Root","_id":1}},{"_session":{"token":"ac554a02-3ef0-42da-8ffb-603d73de95f9"},"event":{"_id":54,"global_object_id":"7@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":7,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","session_self":true,"timestamp":"2019-03-13T10:41:06+01:00","type":"OBJECT_INSERT"},"user":{"_generated_displayname":"Root","_id":1}},{"_session":{"token":"ac554a02-3ef0-42da-8ffb-603d73de95f9"},"event":{"_id":55,"global_object_id":"8@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":8,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","session_self":true,"timestamp":"2019-03-13T10:41:07+01:00","type":"OBJECT_INSERT"},"user":{"_generated_displayname":"Root","_id":1}},{"_session":{"token":"ac554a02-3ef0-42da-8ffb-603d73de95f9"},"event":{"_id":56,"global_object_id":"9@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":9,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","session_self":true,"timestamp":"2019-03-13T10:41:07+01:00","type":"OBJECT_INSERT"},"user":{"_generated_displayname":"Root","_id":1}},{"_session":{"token":"ac554a02-3ef0-42da-8ffb-603d73de95f9"},"event":{"_id":57,"global_object_id":"10@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":10,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","session_self":true,"timestamp":"2019-03-13T10:41:07+01:00","type":"OBJECT_INSERT"},"user":{"_generated_displayname":"Root","_id":1}},{"_session":{"token":"ac554a02-3ef0-42da-8ffb-603d73de95f9"},"event":{"_id":58,"global_object_id":"11@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":11,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","session_self":true,"timestamp":"2019-03-13T10:41:07+01:00","type":"OBJECT_INSERT"},"user":{"_generated_displayname":"Root","_id":1}},{"_session":{"token":"ac554a02-3ef0-42da-8ffb-603d73de95f9"},"event":{"_id":59,"global_object_id":"12@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":12,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","session_self":true,"timestamp":"2019-03-13T10:41:07+01:00","type":"OBJECT_INSERT"},"user":{"_generated_displayname":"Root","_id":1}},{"event":{"_id":60,"global_object_id":"5@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":5,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","timestamp":"2019-03-13T10:41:07+01:00","type":"OBJECT_INDEX"}},{"event":{"_id":61,"global_object_id":"6@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":6,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","timestamp":"2019-03-13T10:41:07+01:00","type":"OBJECT_INDEX"}},{"event":{"_id":62,"global_object_id":"3@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":3,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","timestamp":"2019-03-13T10:41:07+01:00","type":"OBJECT_INDEX"}},{"event":{"_id":63,"global_object_id":"4@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":4,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","timestamp":"2019-03-13T10:41:07+01:00","type":"OBJECT_INDEX"}},{"_session":{"token":"ac554a02-3ef0-42da-8ffb-603d73de95f9"},"event":{"_id":64,"global_object_id":"13@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":13,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","session_self":true,"timestamp":"2019-03-13T10:41:07+01:00","type":"OBJECT_INSERT"},"user":{"_generated_displayname":"Root","_id":1}},{"_session":{"token":"ac554a02-3ef0-42da-8ffb-603d73de95f9"},"event":{"_id":65,"global_object_id":"14@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":14,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","session_self":true,"timestamp":"2019-03-13T10:41:08+01:00","type":"OBJECT_INSERT"},"user":{"_generated_displayname":"Root","_id":1}},{"_session":{"token":"ac554a02-3ef0-42da-8ffb-603d73de95f9"},"event":{"_id":66,"global_object_id":"15@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":15,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","session_self":true,"timestamp":"2019-03-13T10:41:08+01:00","type":"OBJECT_INSERT"},"user":{"_generated_displayname":"Root","_id":1}},{"_session":{"token":"ac554a02-3ef0-42da-8ffb-603d73de95f9"},"event":{"_id":67,"global_object_id":"16@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":16,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","session_self":true,"timestamp":"2019-03-13T10:41:08+01:00","type":"OBJECT_INSERT"},"user":{"_generated_displayname":"Root","_id":1}},{"event":{"_id":68,"global_object_id":"8@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":8,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","timestamp":"2019-03-13T10:41:08+01:00","type":"OBJECT_INDEX"}},{"event":{"_id":69,"global_object_id":"9@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":9,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","timestamp":"2019-03-13T10:41:08+01:00","type":"OBJECT_INDEX"}},{"event":{"_id":70,"global_object_id":"7@ebe5e467-4da9-4cff-81b6-cee9b1385b7c","object_id":7,"object_version":1,"objecttype":"main","pollable":true,"schema":"USER","timestamp":"2019-03-13T10:41:08+01:00","type":"OBJECT_INDEX"}}],"header":{"Cache-Control":["no-cache"],"Content-Type":["application/json; charset=utf-8"],"Date":["Wed, 13 Mar 2019 09:41:16 GMT"],"Last-Modified":["Wed, 13 Mar 2019, 09:41:16 GMT"],"Pragma":["no-cache"],"Server":["Apache/2.4.25 (Debian)"],"Vary":["Origin,Accept-Encoding"],"X-Easydb-Api-Version":["1"],"X-Easydb-Base-Schema-Version":["207"],"X-Easydb-Solution":["simon"],"X-Easydb-User-Schema-Version":["2"]},"statuscode":200}`

	fmt.Println(gjson.Get(jsolo, "body|@reverse|0.event._id"))
}

func TestCollectResponseShouldWork(t *testing.T) {

	i := -2

	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, `[{"ID":%d},{"ID":%d}]`, i, i+1)
		i = i + 2
	}))
	defer ts.Close()

	testManifest := []byte(`
        {
            "name": "CollectTest",
				"request":{
				"endpoint": "suggest",
				"method": "GET"
				},
		        "timeout_ms":3000,
		        "collect_response":[
					{
						"body":[{
							"ID":2
						}]
					},
					{
						"body":[{
							"ID":22
						}]
					},
					{
						"body":[{
							"ID":122
						}]
					},
					{
						"body":[{
							"ID":212
						}]
					}
				]

        }
`)

	filesystem.Fs = afero.NewMemMapFs()
	afero.WriteFile(filesystem.Fs, "manifest.json", []byte(testManifest), 644)

	r := report.NewReport()

	var test Case
	err := json.Unmarshal(testManifest, &test)
	if err != nil {
		t.Fatal(err)
	}
	test.ServerURL = ts.URL
	test.dataStore = datastore.NewStore(false)

	test.runAPITestCase(r.Root())

	testResult := string(r.GetTestResult(report.ParseJSONResult))

	if r.DidFail() {
		t.Errorf("collectResponse did not work: %s", testResult)
	}

}

func TestCollectLoadExternalFile(t *testing.T) {

	i := -2

	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, `[{"ID":%d},{"ID":%d}]`, i, i+1)
		i = i + 2
	}))
	defer ts.Close()

	filesystem.Fs = afero.NewMemMapFs()
	externalFile := []byte(`{
						"body":[{
							"ID":2
						}]
					}`)

	testManifest := []byte(`
        {
            "name": "CollectTest",
				"request":{
				"endpoint": "suggest",
				"method": "GET"
				},
		        "timeout_ms":300,
		        "collect_response":["@collect.json"]
        }`)

	filesystem.Fs = afero.NewMemMapFs()
	afero.WriteFile(filesystem.Fs, "manifest.json", []byte(testManifest), 644)
	afero.WriteFile(filesystem.Fs, "collect.json", []byte(externalFile), 644)

	r := report.NewReport()

	var test Case
	err := json.Unmarshal(testManifest, &test)
	if err != nil {
		t.Fatal(err)
	}
	test.ServerURL = ts.URL
	test.dataStore = datastore.NewStore(false)

	test.runAPITestCase(r.Root())

	testResult := string(r.GetTestResult(report.ParseJSONResult))

	if r.DidFail() {
		t.Errorf("collectResponse did not work: %s", testResult)
	}

}

func TestCollectLoadExternalCollect(t *testing.T) {

	i := -2

	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, `[{"ID":%d},{"ID":%d}]`, i, i+1)
		i = i + 2
	}))
	defer ts.Close()

	filesystem.Fs = afero.NewMemMapFs()
	externalFile := []byte(`[{
						"body":[{
							"ID":2
						}]
					},{
						"body":[{
							"ID":6
						}]
					},{
						"body":[{
							"ID":7
						}]
					}]`)

	testManifest := []byte(`
        {
            "name": "CollectTest",
				"request":{
				"endpoint": "suggest",
				"method": "GET"
				},
		        "timeout_ms":3000,
		        "collect_response":"@collect.json"
        }`)

	filesystem.Fs = afero.NewMemMapFs()
	afero.WriteFile(filesystem.Fs, "manifest.json", []byte(testManifest), 644)
	afero.WriteFile(filesystem.Fs, "collect.json", []byte(externalFile), 644)

	r := report.NewReport()

	var test Case
	err := json.Unmarshal(testManifest, &test)
	if err != nil {
		t.Fatal(err)
	}
	test.ServerURL = ts.URL
	test.dataStore = datastore.NewStore(false)

	test.runAPITestCase(r.Root())

	testResult := string(r.GetTestResult(report.ParseJSONResult))

	if r.DidFail() {
		t.Errorf("collectResponse did not work: %s", testResult)
	}

}

func TestCollectEvents(t *testing.T) {
	i := 115
	j := 100
	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, `[
    {
        "event": {
            "type": "OBJECT_INDEX",
            "_id": 961,
            "object_version": 1,
            "object_id": 118,
            "schema": "USER",
            "objecttype": "pictures",
            "global_object_id": "118@8367e587-f999-4e72-b69d-b5742eb4d5f4",
            "timestamp": "2018-11-28T17:37:27+01:00",
            "pollable": true
        }
    },
    {
        "event": {
            "type": "OBJECT_INDEX",
            "_id": 962,
            "object_version": 0,
            "object_id": 1000832836,
            "schema": "BASE",
            "basetype": "asset",
            "timestamp": "2018-11-28T17:37:27+01:00",
            "pollable": true
        }
    },
    {
        "event": {
            "type": "OBJECT_INDEX",
            "_id": 963,
            "object_version": 0,
            "object_id": %d,
            "schema": "BASE",
            "basetype": "asset",
            "timestamp": "2018-11-28T17:37:27+01:00",
            "pollable": true
        }
    },
    {
        "event": {
            "type": "OBJECT_INDEX",
            "_id": 963,
            "object_version": 0,
            "object_id": %d,
            "schema": "BASE",
            "basetype": "asset",
            "timestamp": "2018-11-28T17:37:27+01:00",
            "pollable": true
        }
    }
]
`, i, j)
		i++
		j--
	}))
	defer ts.Close()

	filesystem.Fs = afero.NewMemMapFs()
	externalFile := []byte(`[{"body":[{"event":{"object_id":117}}]},{"body":[{"event":{"object_id":118}}]},{"body":[{"event":{"object_id":418}}]},{"body":[{"event":{"object_id":92}}]}]`)

	testManifest := []byte(`
        {
            "name": "CollectTest",
				"request":{
				"endpoint": "suggest",
				"method": "GET"
				},
		        "timeout_ms":6000,
		        "collect_response":"@collect.json"
        }`)

	filesystem.Fs = afero.NewMemMapFs()
	afero.WriteFile(filesystem.Fs, "manifest.json", []byte(testManifest), 644)
	afero.WriteFile(filesystem.Fs, "collect.json", []byte(externalFile), 644)

	r := report.NewReport()

	var test Case
	err := json.Unmarshal(testManifest, &test)
	if err != nil {
		t.Fatal(err)
	}
	test.ServerURL = ts.URL
	test.dataStore = datastore.NewStore(false)

	test.runAPITestCase(r.Root())

	testResult := string(r.GetTestResult(report.ParseJSONResult))

	if r.DidFail() {
		t.Errorf("collectResponse did not work: %s", testResult)
	}

}

func TestCollectResponseShouldFail(t *testing.T) {

	i := 2

	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, `[{"ID":%d},{"ID":%d}]`, i, i+1)
		i = i + 2
	}))
	defer ts.Close()

	testManifest := []byte(`
        {
            "name": "CollectTest",
				"request":{
				"endpoint": "suggest",
				"method": "GET"
				},
		        "timeout_ms":30,
		        "collect_response":[
					{
						"body":[{
							"ID":1
						}]
					}
				]

        }
`)

	filesystem.Fs = afero.NewMemMapFs()
	afero.WriteFile(filesystem.Fs, "manifest.json", []byte(testManifest), 644)

	r := report.NewReport()
	r.Root().NoLogTime = true

	var test Case
	err := json.Unmarshal(testManifest, &test)
	if err != nil {
		t.Fatal(err)
	}
	test.ServerURL = ts.URL
	test.dataStore = datastore.NewStore(false)

	test.runAPITestCase(r.Root())

	r.GetTestResult(report.ParseJSONResult)

	log := r.GetLog()

	if !r.DidFail() {
		t.Errorf("Did not fail but it should")
	}

	if len(log) != 2 {
		t.Fatalf("Length of log != 2. Log '%s'", log)
	}

	if log[0] != "Pull Timeout '30ms' exceeded" {
		t.Errorf("Got '%s', expected 'Pull Timeout '30ms' exceeded'", log[0])
	}

	if log[1] != `Collect response not found: {"body":[{"ID":1}]}` {
		t.Errorf(`Got '%s', exptected 'Collect response not found: {"body":[{"ID":1}]}'`, log[1])
	}
}

func TestHeaderFromDatastoreWithMap(t *testing.T) {

	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, `{"Auth": "%s"}`, r.Header.Get("AuthHeader"))
	}))
	defer ts.Close()

	testManifest := []byte(`
        {
            "name": "CollectTest",
			"request":{
				"endpoint": "suggest",
				"method": "GET",
				"header_from_store":{
					"authHeader":"hallo[du]"
				}
			},
			"response":{
				"body": {
					"Auth": "du index"
				}
			}
        }
`)

	filesystem.Fs = afero.NewMemMapFs()
	afero.WriteFile(filesystem.Fs, "manifest.json", []byte(testManifest), 644)

	r := report.NewReport()
	r.Root().NoLogTime = true

	var test Case
	err := json.Unmarshal(testManifest, &test)
	if err != nil {
		t.Fatal(err)
	}
	test.ServerURL = ts.URL

	test.dataStore = datastore.NewStore(false)
	test.dataStore.Set("hallo[du]", "du index")
	test.dataStore.Set("hallo[sie]", "sie index")

	test.runAPITestCase(r.Root())

	r.GetTestResult(report.ParseJSONResult)
	if r.DidFail() {
		t.Errorf("Did fail but it should not")
	}

}

func TestHeaderFromDatastoreWithSlice(t *testing.T) {

	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, `{"Auth": "%s"}`, r.Header.Get("AuthHeader"))
	}))
	defer ts.Close()

	testManifest := []byte(`
        {
            "name": "CollectTest",
			"request":{
				"endpoint": "suggest",
				"method": "GET",
				"header_from_store":{
					"authHeader":"hallo[3]"
				}
			},
			"response":{
				"body": {
					"Auth": "es index"
				}
			}
        }
`)

	filesystem.Fs = afero.NewMemMapFs()
	afero.WriteFile(filesystem.Fs, "manifest.json", []byte(testManifest), 644)

	r := report.NewReport()
	r.Root().NoLogTime = true

	var test Case
	err := json.Unmarshal(testManifest, &test)
	if err != nil {
		t.Fatal(err)
	}
	test.ServerURL = ts.URL

	test.dataStore = datastore.NewStore(false)
	test.dataStore.Set("hallo[]", "du index")
	test.dataStore.Set("hallo[]", "sie index")
	test.dataStore.Set("hallo[]", "er index")
	test.dataStore.Set("hallo[]", "es index")
	test.dataStore.Set("hallo[]", "mama index")

	test.runAPITestCase(r.Root())

	r.GetTestResult(report.ParseJSONResult)
	if r.DidFail() {
		t.Errorf("Did fail but it should not")
	}

}

func TestBinaryComparisonValid(t *testing.T) {

	bArr := "/9j/4AAQSkZJRgABAQEAWgBaAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wgARCAA8ADwDAREAAhEBAxEB/8QAGAABAQEBAQAAAAAAAAAAAAAAAAcIBgT/xAAYAQEBAQEBAAAAAAAAAAAAAAAAAwIEAf/aAAwDAQACEAMQAAAB1SAAAAAAAAS6sue1mXVnsPj68ednJsPj6wJFaPNazFrR7HG+O3jdfD3ASK0ea1mQWlrzj68h9nJuHh7QOc1nw++c5rNUlWV1lVJVAAAAAAAAH//EACEQAAEDBAIDAQAAAAAAAAAAAAUEBgcAAQIDEDUWNkAX/9oACAEBAAEFAvhkhZvQtmKiKoggPnSWl7UAOktz25lL1OHutd+26d5frpimhtuoeXMpepw91rmxtm+/GQ9NnG2D75PgtDiHttrpWvpWxyNXl6RRyNQF/i//xAAhEQABAwMEAwAAAAAAAAAAAAABAAIDERIyECAxQBMhUf/aAAgBAwEBPwHoyemqI1CcTdo0m7ZLiouE/JeUpmWyXFRcJ2atHxNz2OFwomttRjBNdBGAa9P/xAAhEQACAgEEAgMAAAAAAAAAAAABAgADMhESIDEQQBMhUf/aAAgBAgEBPwH0axq0tAB+oqjb4ZRt4VZS7uJjPhWPjwqyl3cXCbm/Y2HBW2nWMxbuCwgaeDYSNPT/AP/EACwQAAIBAgQDBwUBAAAAAAAAAAECAwAEBRESEyAhcxAyQEGBkrE0NWGU0dL/2gAIAQEABj8C8C8ttNJbybqjXExU1fNdXM1yyyAAzOWy5fmp4I8QukhFyF21mYLly8uyCCTELp4TcldtpmK5c/LgfqpWIdUfFX8q95J9Qzr6ax9j/wCqsJW7zz6jlwP1UrEOqPirlWGpTdAEH0r7VY/rp/KtlUaVF0QAPXgNnctIkZYNnEQDyqaK1kmkWVtR3iD8AU+IyTXQmaTc0qy6c/b2JiMc10Zlk3NLMunP2+D/AP/EAB8QAQACAQQDAQAAAAAAAAAAAAERIRAAIDFRQEHwsf/aAAgBAQABPyHwQomkTNkmk5ppR6EtAB7FEqWiMIB7NEqWiNn1u3B50DDOEkOAp0BDOEsuz63bg8bAcJEmmKg2A4QBNNlnkgDw5H80fICqCEVoEB8woI9Wiu8MB8UpJ9Wi+/D/AP/aAAwDAQACAAMAAAAQkkkkkkkkhqiklP3klIQkkmmkkkkkkkkk/8QAHhEBAAIBBQEBAAAAAAAAAAAAAQARMRAgQEFhcZH/2gAIAQMBAT8Q4KbBiJbcGwe9FkXvaZoqbPMisu0zTJ9nm/Jg+7BsQTRLJdKJeH//xAAdEQEAAgEFAQAAAAAAAAAAAAABABExECBAYXGR/9oACAECAQE/EOCVCQhSokqGNAtAxtMEFknYwUzaYJi8nc+zN5sShHRimQ0tkOH/AP/EAB8QAQACAQQDAQAAAAAAAAAAAAERIQAQIEFRMUBh8P/aAAgBAQABPxD0SU0jpKBxh5JxPAxfTURBbgxvhaqkkEKWoi9C+FqqQ00IKiK2lP2e2GYySrhhBGJOE0yuYyShlgFWJeV2lP2e2E5hMsShpEqHToTmEwxACgCoNihfc8CgTxd4h8Cw4BCCOxwLp+6yAS8CrfdEun7rJEDyKt99P//Z"

	filesystem.Fs = afero.NewMemMapFs()

	decoded, err := base64.StdEncoding.DecodeString(bArr)
	if err != nil {
		fmt.Println("decode error:", err)
		return
	}

	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		io.Copy(w, bytes.NewReader(decoded))
	}))
	defer ts.Close()

	testManifest := []byte(`
        {
            "name": "Binary Conversion Valid",
			"request":{
				"endpoint": "suggest",
				"method": "GET"
			},
			"response":"@simple.bin"
        }
`)
	r := report.NewReport()
	r.Root().NoLogTime = true
	afero.WriteFile(filesystem.Fs, "manifest.json", []byte(testManifest), 644)
	afero.WriteFile(filesystem.Fs, "simple.bin", decoded, 644)

	var test Case
	err = json.Unmarshal(testManifest, &test)
	if err != nil {
		t.Fatal(err)
	}
	test.ServerURL = ts.URL
	test.dataStore = datastore.NewStore(false)
	test.runAPITestCase(r.Root())

	r.GetTestResult(report.ParseJSONResult)
	if r.DidFail() {
		t.Errorf("Did fail but it should not")
	}

}

func TestBinaryComparisonInValid(t *testing.T) {

	bArr := "/9j/4AAQSkZJRgABAQEAWgBaAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wgARCAA8ADwDAREAAhEBAxEB/8QAGAABAQEBAQAAAAAAAAAAAAAAAAcIBgT/xAAYAQEBAQEBAAAAAAAAAAAAAAAAAwIEAf/aAAwDAQACEAMQAAAB1SAAAAAAAAS6sue1mXVnsPj68ednJsPj6wJFaPNazFrR7HG+O3jdfD3ASK0ea1mQWlrzj68h9nJuHh7QOc1nw++c5rNUlWV1lVJVAAAAAAAAH//EACEQAAEDBAIDAQAAAAAAAAAAAAUEBgcAAQIDEDUWNkAX/9oACAEBAAEFAvhkhZvQtmKiKoggPnSWl7UAOktz25lL1OHutd+26d5frpimhtuoeXMpepw91rmxtm+/GQ9NnG2D75PgtDiHttrpWvpWxyNXl6RRyNQF/i//xAAhEQABAwMEAwAAAAAAAAAAAAABAAIDERIyECAxQBMhUf/aAAgBAwEBPwHoyemqI1CcTdo0m7ZLiouE/JeUpmWyXFRcJ2atHxNz2OFwomttRjBNdBGAa9P/xAAhEQACAgEEAgMAAAAAAAAAAAABAgADMhESIDEQQBMhUf/aAAgBAgEBPwH0axq0tAB+oqjb4ZRt4VZS7uJjPhWPjwqyl3cXCbm/Y2HBW2nWMxbuCwgaeDYSNPT/AP/EACwQAAIBAgQDBwUBAAAAAAAAAAECAwAEBRESEyAhcxAyQEGBkrE0NWGU0dL/2gAIAQEABj8C8C8ttNJbybqjXExU1fNdXM1yyyAAzOWy5fmp4I8QukhFyF21mYLly8uyCCTELp4TcldtpmK5c/LgfqpWIdUfFX8q95J9Qzr6ax9j/wCqsJW7zz6jlwP1UrEOqPirlWGpTdAEH0r7VY/rp/KtlUaVF0QAPXgNnctIkZYNnEQDyqaK1kmkWVtR3iD8AU+IyTXQmaTc0qy6c/b2JiMc10Zlk3NLMunP2+D/AP/EAB8QAQACAQQDAQAAAAAAAAAAAAERIRAAIDFRQEHwsf/aAAgBAQABPyHwQomkTNkmk5ppR6EtAB7FEqWiMIB7NEqWiNn1u3B50DDOEkOAp0BDOEsuz63bg8bAcJEmmKg2A4QBNNlnkgDw5H80fICqCEVoEB8woI9Wiu8MB8UpJ9Wi+/D/AP/aAAwDAQACAAMAAAAQkkkkkkkkhqiklP3klIQkkmmkkkkkkkkk/8QAHhEBAAIBBQEBAAAAAAAAAAAAAQARMRAgQEFhcZH/2gAIAQMBAT8Q4KbBiJbcGwe9FkXvaZoqbPMisu0zTJ9nm/Jg+7BsQTRLJdKJeH//xAAdEQEAAgEFAQAAAAAAAAAAAAABABExECBAYXGR/9oACAECAQE/EOCVCQhSokqGNAtAxtMEFknYwUzaYJi8nc+zN5sShHRimQ0tkOH/AP/EAB8QAQACAQQDAQAAAAAAAAAAAAERIQAQIEFRMUBh8P/aAAgBAQABPxD0SU0jpKBxh5JxPAxfTURBbgxvhaqkkEKWoi9C+FqqQ00IKiK2lP2e2GYySrhhBGJOE0yuYyShlgFWJeV2lP2e2E5hMsShpEqHToTmEwxACgCoNihfc8CgTxd4h8Cw4BCCOxwLp+6yAS8CrfdEun7rJEDyKt99P//Z"
	bUArr := ""

	filesystem.Fs = afero.NewMemMapFs()

	decoded, err := base64.StdEncoding.DecodeString(bArr)
	if err != nil {
		fmt.Println("decode error:", err)
		return
	}

	decoded2, err := base64.StdEncoding.DecodeString(bUArr)
	if err != nil {
		fmt.Println("decode error:", err)
		return
	}

	afero.WriteFile(filesystem.Fs, "simple.bin", decoded, 644)

	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		io.Copy(w, bytes.NewReader(decoded2))
	}))
	defer ts.Close()

	testManifest := []byte(`
        {
            "name": "Binary Conversion Invalid",
			"request":{
				"endpoint": "suggest",
				"method": "GET"
			},
			"response":"@simple.bin"
        }
`)
	r := report.NewReport()
	r.Root().NoLogTime = true
	afero.WriteFile(filesystem.Fs, "manifest.json", []byte(testManifest), 644)

	var test Case
	err = json.Unmarshal(testManifest, &test)
	if err != nil {
		t.Fatal(err)
	}
	test.ServerURL = ts.URL
	test.dataStore = datastore.NewStore(false)
	test.runAPITestCase(r.Root())

	t.Log(string(r.GetTestResult(report.ParseJSONResult)))
	if !r.DidFail() {
		t.Errorf("Did not fail but it should")
	}

}
